0x0NNN -> callr $NNN
0x00E0 -> clr
0x00EE -> ret
0x1NNN -> jmp $NNN
0x2NNN -> call $NNN
0x3XNN -> skipieq (%VX, $NN)
0x4XNN -> skipineq (%VX, $NN)
0x5XY0 -> skipreq (%VX, %VY)
0x6XNN -> mov $NN, %VX
0x7XNN -> add $NN, %VX
0x8XY0 -> mov %VX, %VY
0x8XY1 -> or %VY, %VX
0x8XY2 -> and %VY, %VX
0x8XY3 -> xor %VY, %VX
0x8XY4 -> add %VY, %VX
0x8XY5 -> subr %VX, %VY // VX = VX - VY
0x8XY6 -> shr %VY, %VX
0x8XY7 -> subl %VX, %VY // VX = VY - VX
0x8XYE -> movshl %VY, %VX
0x9XY0 -> skipnreq (%VX, %VY)
0xANNN -> setaddr $NNN
0xBNNN -> movadd $NNN, %PC // (PC = V0+NNN)
0xCXNN -> movrand $NN, %VX // (VX = NN & rand(255))
0xDXYN -> draw (%VX, %VY, $N)
0xEX9E -> skipkey %VX
0xEXA1 -> skipnkey %VX
0xFX07 -> delay %VX
0xFX0A -> waitkey %VX
0xFX15 -> timer %VX
0xFX18 -> sound %VX
0xFX29 -> movchar %VX (sets %I)
0xFX33 -> bcd %VX (stores at (%I))
0xFX55 -> push (stores at (%I))
0xFX65 -> pop (pulls from (%I))
